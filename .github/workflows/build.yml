name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest,  windows-latest]
    name: python ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v1
      - name: setting up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.1.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: caching pip storage
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.OS }}-${{ matrix.python-version }}-pip
      - name: caching poetry environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.OS }}-${{ matrix.python-version }}-poetry
      - name: installing poetry
        run: |
          pip install poetry
          pip install poetry-dynamic-versioning
      - name: installing dependencies
        run: poetry install -n -vv --no-ansi
      - name: running tests
        run: poetry run green -vv
      - name: building
        run: poetry build -n -vv --no-ansi
      - name: generate coverage xml
        run: poetry run coverage xml
      - name: uploading coverage to codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: python ${{ matrix.python-version }} on ${{ runner.os }}
